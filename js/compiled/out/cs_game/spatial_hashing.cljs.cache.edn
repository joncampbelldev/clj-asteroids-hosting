{:rename-macros {}, :renames {}, :use-macros {union clojure.set}, :excludes nil, :name cs-game.spatial-hashing, :imports nil, :requires {clojure.set clojure.set}, :uses {union clojure.set}, :defs {generate-config {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :line 5, :column 7, :end-line 5, :end-column 22, :arglists (quote ([world-width world-height leeway-outside-world cell-size]))}, :name cs-game.spatial-hashing/generate-config, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :end-column 22, :method-params ([world-width world-height leeway-outside-world cell-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 4, :fn-var true, :arglists (quote ([world-width world-height leeway-outside-world cell-size]))}, index-for-point {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :line 14, :column 7, :end-line 14, :end-column 22, :arglists (quote ([x y cells-per-row offset]))}, :name cs-game.spatial-hashing/index-for-point, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :end-column 22, :method-params ([x y cells-per-row offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y cells-per-row offset]))}, get-points-for-aabb {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :line 19, :column 7, :end-line 19, :end-column 26, :arglists (quote ([x y width height cell-size]))}, :name cs-game.spatial-hashing/get-points-for-aabb, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :end-column 26, :method-params ([x y width height cell-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x y width height cell-size]))}, add-entity-to-spatial-hash {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :line 30, :column 8, :end-line 30, :end-column 34, :private true, :arglists (quote ([initial-transient-spatial-hash {:keys [entity/id position dimensions size]} cell-size columns offset]))}, :private true, :name cs-game.spatial-hashing/add-entity-to-spatial-hash, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :end-column 34, :method-params ([initial-transient-spatial-hash p__21575 cell-size columns offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 5, :fn-var true, :arglists (quote ([initial-transient-spatial-hash {:keys [entity/id position dimensions size]} cell-size columns offset]))}, build {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :line 48, :column 7, :end-line 48, :end-column 12, :arglists (quote ([entities {:keys [offset cell-size columns rows empty]}]))}, :name cs-game.spatial-hashing/build, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :end-column 12, :method-params ([entities p__21602]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entities {:keys [offset cell-size columns rows empty]}]))}, nearby-entity-indexes {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :line 59, :column 7, :end-line 59, :end-column 28, :arglists (quote ([spatial-hash entity]))}, :name cs-game.spatial-hashing/nearby-entity-indexes, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/spatial_hashing.cljs", :end-column 28, :method-params ([spatial-hash entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spatial-hash entity]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:cell-size :offset :columns :empty :dimensions :size :rows :entity/id :position :data}, :order [:empty :cell-size :columns :rows :offset :entity/id :position :dimensions :size :data]}, :doc nil}