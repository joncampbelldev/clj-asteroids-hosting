{:rename-macros {}, :renames {}, :use-macros {}, :excludes nil, :name cs-game.collisions, :imports nil, :requires {cs-game.util.expanded-lang cs-game.util.expanded-lang, spatial-hashing cs-game.spatial-hashing, cs-game.spatial-hashing cs-game.spatial-hashing, sat cs-game.util.sat, cs-game.util.sat cs-game.util.sat, maths cs-game.util.maths, cs-game.util.maths cs-game.util.maths}, :uses {strict-empty? cs-game.util.expanded-lang, group-by-transform cs-game.util.expanded-lang}, :defs {collision-between {:name cs-game.collisions/collision-between, :file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 7, :column 1, :end-line 7, :end-column 28, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 7, :column 11, :end-line 7, :end-column 28}}, narrow-phase-detect {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 12, :column 7, :end-line 12, :end-column 26, :arglists (quote ([entity1 entity2]))}, :name cs-game.collisions/narrow-phase-detect, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :end-column 26, :method-params ([entity1 entity2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entity1 entity2]))}, mid-phase-colliding? {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 21, :column 7, :end-line 21, :end-column 27, :arglists (quote ([entity1 entity2]))}, :name cs-game.collisions/mid-phase-colliding?, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :end-column 27, :method-params ([entity1 entity2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entity1 entity2]))}, detect-between-indexes {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 28, :column 7, :end-line 28, :end-column 29, :arglists (quote ([world left-entity right-entity]))}, :name cs-game.collisions/detect-between-indexes, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :end-column 29, :method-params ([world left-entity right-entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 3, :fn-var true, :arglists (quote ([world left-entity right-entity]))}, check-for-entity {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 42, :column 7, :end-line 42, :end-column 23, :arglists (quote ([entity-index initial-world initial-collided-index-pairs]))}, :name cs-game.collisions/check-for-entity, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :end-column 23, :method-params ([entity-index initial-world initial-collided-index-pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 3, :fn-var true, :arglists (quote ([entity-index initial-world initial-collided-index-pairs]))}, system {:protocol-inline nil, :meta {:file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :line 75, :column 7, :end-line 75, :end-column 13, :arglists (quote ([collidable-entity-indexes world]))}, :name cs-game.collisions/system, :variadic false, :file "/Users/jon/projects/clj-asteroids/src/cs_game/collisions.cljs", :end-column 13, :method-params ([collidable-entity-indexes world]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([collidable-entity-indexes world]))}}, :require-macros {maths cs-game.util.maths, cs-game.util.maths cs-game.util.maths}, :cljs.analyzer/constants {:seen #{:rotation :default :size :entity-spatial-hash :entity/id :position :ces/entities :hierarchy :entity/collision-polygon-points :collision-pairs :entity/collision}, :order [:hierarchy :entity/collision :default :position :entity/collision-polygon-points :rotation :size :ces/entities :entity/id :entity-spatial-hash :collision-pairs]}, :doc nil}